//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WinGrep.VaultSearcher {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://libralex.co.za/VaultSearcher", ConfigurationName="VaultSearcher.VaultSearcherSoap")]
    public interface VaultSearcherSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://libralex.co.za/VaultSearcher/Search", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WinGrep.VaultSearcher.SearchResultInfo[] Search(string searchText, string searchDir, bool recursive, bool ignoreCase, bool returnMany, string zipFileExt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://libralex.co.za/VaultSearcher/Search", ReplyAction="*")]
        System.Threading.Tasks.Task<WinGrep.VaultSearcher.SearchResultInfo[]> SearchAsync(string searchText, string searchDir, bool recursive, bool ignoreCase, bool returnMany, string zipFileExt);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://libralex.co.za/VaultSearcher")]
    public partial class SearchResultInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string searchTermField;
        
        private string fileNameField;
        
        private double fileSizeField;
        
        private System.DateTime creationTimeField;
        
        private bool selectedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string SearchTerm {
            get {
                return this.searchTermField;
            }
            set {
                this.searchTermField = value;
                this.RaisePropertyChanged("SearchTerm");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
                this.RaisePropertyChanged("FileName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public double FileSize {
            get {
                return this.fileSizeField;
            }
            set {
                this.fileSizeField = value;
                this.RaisePropertyChanged("FileSize");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime CreationTime {
            get {
                return this.creationTimeField;
            }
            set {
                this.creationTimeField = value;
                this.RaisePropertyChanged("CreationTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool Selected {
            get {
                return this.selectedField;
            }
            set {
                this.selectedField = value;
                this.RaisePropertyChanged("Selected");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface VaultSearcherSoapChannel : WinGrep.VaultSearcher.VaultSearcherSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VaultSearcherSoapClient : System.ServiceModel.ClientBase<WinGrep.VaultSearcher.VaultSearcherSoap>, WinGrep.VaultSearcher.VaultSearcherSoap {
        
        public VaultSearcherSoapClient() {
        }
        
        public VaultSearcherSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public VaultSearcherSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VaultSearcherSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VaultSearcherSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WinGrep.VaultSearcher.SearchResultInfo[] Search(string searchText, string searchDir, bool recursive, bool ignoreCase, bool returnMany, string zipFileExt) {
            return base.Channel.Search(searchText, searchDir, recursive, ignoreCase, returnMany, zipFileExt);
        }
        
        public System.Threading.Tasks.Task<WinGrep.VaultSearcher.SearchResultInfo[]> SearchAsync(string searchText, string searchDir, bool recursive, bool ignoreCase, bool returnMany, string zipFileExt) {
            return base.Channel.SearchAsync(searchText, searchDir, recursive, ignoreCase, returnMany, zipFileExt);
        }
    }
}
